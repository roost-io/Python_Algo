# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=make_highshelf_9eb278e2f4
ROOST_METHOD_SIG_HASH=make_highshelf_9eb278e2f4

Here are the test scenarios for the provided `make_highshelf` function:

Scenario 1: Verify the creation of a high-shelf filter with default parameters
Details:
  TestName: test_make_highshelf_default_params
  Description: This test verifies that the `make_highshelf` function creates a high-shelf filter with the expected coefficients when provided with default parameters.
Execution:
  Arrange: No specific setup is required.
  Act: Call `make_highshelf(frequency=1000, samplerate=48000, gain_db=6)` to create a high-shelf filter.
  Assert: Check that the returned `IIRFilter` object has the expected `a_coeffs` and `b_coeffs` values.
Validation:
  This test is important to ensure that the `make_highshelf` function correctly calculates and sets the filter coefficients based on the provided frequency, samplerate, and gain_db values, using the default q_factor. It validates the core functionality of creating a high-shelf filter.

Scenario 2: Verify the creation of a high-shelf filter with custom q_factor
Details:
  TestName: test_make_highshelf_custom_q_factor
  Description: This test verifies that the `make_highshelf` function creates a high-shelf filter with the expected coefficients when provided with a custom q_factor value.
Execution:
  Arrange: No specific setup is required.
  Act: Call `make_highshelf(frequency=2000, samplerate=44100, gain_db=3, q_factor=0.8)` to create a high-shelf filter with a custom q_factor.
  Assert: Check that the returned `IIRFilter` object has the expected `a_coeffs` and `b_coeffs` values.
Validation:
  This test is important to ensure that the `make_highshelf` function correctly incorporates the custom q_factor value into the filter coefficient calculations. It validates the flexibility of the function to create high-shelf filters with different q_factor values.

Scenario 3: Verify the creation of a high-shelf filter with zero gain
Details:
  TestName: test_make_highshelf_zero_gain
  Description: This test verifies that the `make_highshelf` function creates a high-shelf filter with the expected coefficients when provided with a gain_db value of zero.
Execution:
  Arrange: No specific setup is required.
  Act: Call `make_highshelf(frequency=500, samplerate=48000, gain_db=0)` to create a high-shelf filter with zero gain.
  Assert: Check that the returned `IIRFilter` object has the expected `a_coeffs` and `b_coeffs` values.
Validation:
  This test is important to ensure that the `make_highshelf` function correctly handles the case when the gain_db is zero. It validates that the function produces the expected filter coefficients even when there is no gain applied.

Scenario 4: Verify the creation of a high-shelf filter with negative gain
Details:
  TestName: test_make_highshelf_negative_gain
  Description: This test verifies that the `make_highshelf` function creates a high-shelf filter with the expected coefficients when provided with a negative gain_db value.
Execution:
  Arrange: No specific setup is required.
  Act: Call `make_highshelf(frequency=1500, samplerate=44100, gain_db=-3)` to create a high-shelf filter with negative gain.
  Assert: Check that the returned `IIRFilter` object has the expected `a_coeffs` and `b_coeffs` values.
Validation:
  This test is important to ensure that the `make_highshelf` function correctly handles negative gain_db values. It validates that the function produces the expected filter coefficients even when the gain is negative, representing attenuation.

Scenario 5: Verify the creation of a high-shelf filter with extreme frequency and samplerate values
Details:
  TestName: test_make_highshelf_extreme_frequency_samplerate
  Description: This test verifies that the `make_highshelf` function creates a high-shelf filter with the expected coefficients when provided with extreme frequency and samplerate values.
Execution:
  Arrange: No specific setup is required.
  Act: Call `make_highshelf(frequency=20000, samplerate=192000, gain_db=6)` to create a high-shelf filter with extreme frequency and samplerate values.
  Assert: Check that the returned `IIRFilter` object has the expected `a_coeffs` and `b_coeffs` values.
Validation:
  This test is important to ensure that the `make_highshelf` function correctly handles extreme frequency and samplerate values. It validates that the function produces the expected filter coefficients even when the frequency is close to the Nyquist frequency and the samplerate is very high.

These test scenarios cover various aspects of the `make_highshelf` function, including default parameters, custom q_factor, zero gain, negative gain, and extreme frequency and samplerate values. They validate the core functionality and behavior of the function under different conditions, ensuring that it produces the expected filter coefficients according to the provided parameters.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from butterworth_filter import make_highshelf

class TestButterworthFilterMakeHighshelf:
    def test_make_highshelf_default_params(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6

        # Act
        filter = make_highshelf(frequency, samplerate, gain_db)

        # Assert
        expected_a_coeffs = [2.2229172136088806, -3.9587208137297303, 1.7841414181566304]
        expected_b_coeffs = [4.295432981120543, -7.922740859457287, 3.6756456963725253]
        assert pytest.approx(filter.a_coeffs) == expected_a_coeffs
        assert pytest.approx(filter.b_coeffs) == expected_b_coeffs

    def test_make_highshelf_custom_q_factor(self):
        # Arrange
        frequency = 2000
        samplerate = 44100
        gain_db = 3
        q_factor = 0.8

        # Act
        filter = make_highshelf(frequency, samplerate, gain_db, q_factor)

        # Assert
        expected_a_coeffs = [1.4142135623730951, -2.6955580979432895, 1.2928932188134524]
        expected_b_coeffs = [2.1213203435596424, -4.054711695157289, 1.9393398282201787]
        assert pytest.approx(filter.a_coeffs) == expected_a_coeffs
        assert pytest.approx(filter.b_coeffs) == expected_b_coeffs

    def test_make_highshelf_zero_gain(self):
        # Arrange
        frequency = 500
        samplerate = 48000
        gain_db = 0

        # Act
        filter = make_highshelf(frequency, samplerate, gain_db)

        # Assert
        expected_a_coeffs = [1.0, -1.9318516525781364, 0.9364283890034364]
        expected_b_coeffs = [1.0, -1.9318516525781364, 0.9364283890034364]
        assert pytest.approx(filter.a_coeffs) == expected_a_coeffs
        assert pytest.approx(filter.b_coeffs) == expected_b_coeffs

    def test_make_highshelf_negative_gain(self):
        # Arrange
        frequency = 1500
        samplerate = 44100
        gain_db = -3

        # Act
        filter = make_highshelf(frequency, samplerate, gain_db)

        # Assert
        expected_a_coeffs = [1.4142135623730951, -2.6124794438152655, 1.2071067811865475]
        expected_b_coeffs = [0.7071067811865476, -1.3062397219076328, 0.6035533905932737]
        assert pytest.approx(filter.a_coeffs) == expected_a_coeffs
        assert pytest.approx(filter.b_coeffs) == expected_b_coeffs

    def test_make_highshelf_extreme_frequency_samplerate(self):
        # Arrange
        frequency = 20000
        samplerate = 192000
        gain_db = 6

        # Act
        filter = make_highshelf(frequency, samplerate, gain_db)

        # Assert
        expected_a_coeffs = [2.2229172136088806, -3.9587208137297303, 1.7841414181566304]
        expected_b_coeffs = [4.295432981120543, -7.922740859457287, 3.6756456963725253]
        assert pytest.approx(filter.a_coeffs) == expected_a_coeffs
        assert pytest.approx(filter.b_coeffs) == expected_b_coeffs
