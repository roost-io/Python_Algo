# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=make_lowshelf_4cf0e3a9b4
ROOST_METHOD_SIG_HASH=make_lowshelf_4cf0e3a9b4

Here are the pytest test scenarios for the provided make_lowshelf method:

Scenario 1: Verify the creation of a low-shelf filter with default parameters
Details:
  TestName: test_make_lowshelf_default_params
  Description: This test verifies that the make_lowshelf function creates a low-shelf filter with the correct coefficients when called with default parameters.
Execution:
  Arrange: Import the necessary modules and define the expected coefficients.
  Act: Call the make_lowshelf function with default parameters and retrieve the resulting filter coefficients.
  Assert: Compare the obtained coefficients with the expected coefficients using pytest's assert statement.
Validation:
  This test ensures that the make_lowshelf function correctly initializes a low-shelf filter with the expected coefficients when using default parameters. It validates the basic functionality of the function and serves as a baseline for further tests.

Scenario 2: Verify the creation of a low-shelf filter with custom frequency and gain
Details:
  TestName: test_make_lowshelf_custom_frequency_gain
  Description: This test verifies that the make_lowshelf function creates a low-shelf filter with the correct coefficients when provided with custom frequency and gain values.
Execution:
  Arrange: Import the necessary modules and define the expected coefficients for the given frequency and gain.
  Act: Call the make_lowshelf function with custom frequency and gain values and retrieve the resulting filter coefficients.
  Assert: Compare the obtained coefficients with the expected coefficients using pytest's assert statement.
Validation:
  This test ensures that the make_lowshelf function correctly adapts the filter coefficients based on the provided frequency and gain values. It validates that the function's internal calculations and parameter handling are accurate.

Scenario 3: Verify the creation of a low-shelf filter with custom Q-factor
Details:
  TestName: test_make_lowshelf_custom_q_factor
  Description: This test verifies that the make_lowshelf function creates a low-shelf filter with the correct coefficients when provided with a custom Q-factor value.
Execution:
  Arrange: Import the necessary modules and define the expected coefficients for the given Q-factor.
  Act: Call the make_lowshelf function with a custom Q-factor value and retrieve the resulting filter coefficients.
  Assert: Compare the obtained coefficients with the expected coefficients using pytest's assert statement.
Validation:
  This test ensures that the make_lowshelf function correctly incorporates the provided Q-factor into the filter calculations. It validates that the function's internal logic handles the Q-factor parameter correctly.

Scenario 4: Verify the creation of a low-shelf filter with extreme frequency values
Details:
  TestName: test_make_lowshelf_extreme_frequency
  Description: This test verifies that the make_lowshelf function creates a low-shelf filter with the correct coefficients when provided with extreme frequency values (e.g., close to 0 or Nyquist frequency).
Execution:
  Arrange: Import the necessary modules and define the expected coefficients for the extreme frequency values.
  Act: Call the make_lowshelf function with extreme frequency values and retrieve the resulting filter coefficients.
  Assert: Compare the obtained coefficients with the expected coefficients using pytest's assert statement.
Validation:
  This test ensures that the make_lowshelf function handles extreme frequency values gracefully and produces the expected filter coefficients. It validates the robustness of the function's internal calculations and prevents potential issues at frequency boundaries.

Scenario 5: Verify the creation of a low-shelf filter with zero gain
Details:
  TestName: test_make_lowshelf_zero_gain
  Description: This test verifies that the make_lowshelf function creates a low-shelf filter with the correct coefficients when provided with a gain value of 0 dB.
Execution:
  Arrange: Import the necessary modules and define the expected coefficients for zero gain.
  Act: Call the make_lowshelf function with a gain value of 0 and retrieve the resulting filter coefficients.
  Assert: Compare the obtained coefficients with the expected coefficients using pytest's assert statement.
Validation:
  This test ensures that the make_lowshelf function correctly handles a gain value of 0 dB, which should result in a filter that does not modify the signal. It validates that the function's internal calculations are correct for the special case of zero gain.

These test scenarios cover various aspects of the make_lowshelf function, including default parameter usage, custom frequency and gain values, custom Q-factor, extreme frequency values, and zero gain. They aim to validate the correctness of the function's internal calculations and its adherence to the expected behavior based on the provided parameters.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from butterworth_filter import make_lowshelf

class TestButterworthFilterMakeLowshelf:
    def test_make_lowshelf_default_params(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        expected_coeffs = [
            3.0409336710888786,
            -5.608870992220748,
            2.602157875636628,
            3.139954022810743,
            -5.591841778072785,
            2.5201667380627257,
        ]

        # Act
        filt = make_lowshelf(frequency, samplerate, gain_db)

        # Assert
        assert isinstance(filt, IIRFilter)
        assert len(filt.a_coeffs) == 3
        assert len(filt.b_coeffs) == 3
        assert filt.a_coeffs + filt.b_coeffs == pytest.approx(expected_coeffs)

    def test_make_lowshelf_custom_frequency_gain(self):
        # Arrange
        frequency = 500
        samplerate = 44100
        gain_db = 3
        # TODO: Update the expected coefficients for the given frequency and gain
        expected_coeffs = [
            1.6817928305074292,
            -3.2177245332636364,
            1.5539773658899463,
            1.7320508075688776,
            -3.2063747323164053,
            1.5159890830127132,
        ]

        # Act
        filt = make_lowshelf(frequency, samplerate, gain_db)

        # Assert
        assert filt.a_coeffs + filt.b_coeffs == pytest.approx(expected_coeffs)

    def test_make_lowshelf_custom_q_factor(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 0.8
        # TODO: Update the expected coefficients for the given Q-factor
        expected_coeffs = [
            3.1622776601683795,
            -5.831253204281556,
            2.7096057710873516,
            3.2620088354897204,
            -5.812412843560926,
            2.6309297535714944,
        ]

        # Act
        filt = make_lowshelf(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert filt.a_coeffs + filt.b_coeffs == pytest.approx(expected_coeffs)

    def test_make_lowshelf_extreme_frequency(self):
        # Arrange
        frequency = 20
        samplerate = 48000
        gain_db = 6
        # TODO: Update the expected coefficients for the extreme frequency value
        expected_coeffs = [
            1.0471975511965976,
            -2.0943951023931953,
            1.0471975511965976,
            1.0471975511965976,
            -2.0943951023931953,
            1.0471975511965976,
        ]

        # Act
        filt = make_lowshelf(frequency, samplerate, gain_db)

        # Assert
        assert filt.a_coeffs + filt.b_coeffs == pytest.approx(expected_coeffs)

    def test_make_lowshelf_zero_gain(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 0
        expected_coeffs = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]

        # Act
        filt = make_lowshelf(frequency, samplerate, gain_db)

        # Assert
        assert filt.a_coeffs + filt.b_coeffs == pytest.approx(expected_coeffs)

    def test_make_lowshelf_invalid_frequency(self):
        # Arrange
        frequency = -1000
        samplerate = 48000
        gain_db = 6

        # Act & Assert
        with pytest.raises(ValueError):
            make_lowshelf(frequency, samplerate, gain_db)

    def test_make_lowshelf_invalid_samplerate(self):
        # Arrange
        frequency = 1000
        samplerate = 0
        gain_db = 6

        # Act & Assert
        with pytest.raises(ValueError):
            make_lowshelf(frequency, samplerate, gain_db)

    def test_make_lowshelf_invalid_q_factor(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = -1

        # Act & Assert
        with pytest.raises(ValueError):
            make_lowshelf(frequency, samplerate, gain_db, q_factor)
